on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: create release

jobs:
  create_release:
    name: create github release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
  linux32:
    runs-on: ubuntu-latest
    needs: ["create_release"]
    steps:
      - uses: actions/checkout@v2
      - name: gcc-multilib for cross compiling to 32bit
        run: sudo apt-get install gcc-multilib
      - name: get toolchain
        with:
          toolchain: stable
          target: i686-unknown-linux-gnu
        uses: actions-rs/toolchain@v1
      - name: cargo build
        run: cd extension && cargo build --release --target=i686-unknown-linux-gnu
      - run: cp extension/target/i686-unknown-linux-gnu/release/libarma3_reflection.so reflection.so
      - name: upload artifact linux32
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: reflection.so
  linux64:
    runs-on: ubuntu-latest
    needs: ["create_release"]
    steps:
      - uses: actions/checkout@v2
      - name: get toolchain
        with:
          toolchain: stable
        uses: actions-rs/toolchain@v1
      - name: cargo build
        run: cd extension && cargo build --release
      - run: cp extension/target/release/libarma3_reflection.so reflection_x64.so
      - name: upload artifact linux64
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: reflection_x64.so
  windows32:
    runs-on: windows-latest
    needs: ["create_release"]
    steps:
      - uses: actions/checkout@v2
      - name: get toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: i686-pc-windows-msvc
      - name: cargo build win32
        run: cd extension && cargo build --release --target=i686-pc-windows-msvc
      - run: copy extension/target/i686-pc-windows-msvc/release/arma3_reflection.dll reflection.dll
      - name: upload artifact win32
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: reflection.dll
  windows64:
    runs-on: windows-latest
    needs: ["create_release"]
    steps:
      - uses: actions/checkout@v2
      - name: get toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: cargo build win64
        run: cd extension && cargo build --release
      - run: copy extension/target/release/arma3_reflection.dll reflection_x64.dll
      - name: upload artifact win64
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: reflection_x64.dll
  pack_and_upload_mod:
    runs-on: ubuntu-latest
    name: build & upload mod
    needs: ["linux32", "linux64", "windows32", "windows64"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: extension
      - name: copy compiled extensions into mod
        run: cp *.dll *.so ./mod
      - name: pack
        id: pack
        uses: gruppe-adler/action-release-with-hemtt@2.1.1
        with:
          cwd: ./mod
      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: "@arma3_reflection.zip"
          asset_name: "@arma3_reflection.zip"
          asset_content_type: application/zip
