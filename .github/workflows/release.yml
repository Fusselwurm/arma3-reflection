on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: create release

jobs:
  create_release:
    name: create github release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
  build_win:
    name: build Windows binaries
    runs-on: windows-latest
    needs: ["create_release"]
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      - uses: actions/checkout@v2
      - name: Build Win32
        run: msbuild /p:Configuration=Release /p:Platform=Win32
      - run: copy D:\a\arma3-reflection\extension\Release\arma3-reflection.dll reflection.dll
      - name: Upload Win32
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: reflection.dll
      - name: Build x64
        run: msbuild /p:Configuration=Release /p:Platform=x64
      - run: copy D:\a\arma3-reflection\extension\x64\Release\arma3-reflection.dll reflection_x64.dll
      - name: Upload Win64
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: reflection_x64.dll
  build_linux:
    runs-on: ubuntu-latest
    name: build Linux binary
    needs: ["create_release"]
    steps:
      - name: update apt index
        run: sudo apt-get update
      - name: 32bit libs
        run: sudo apt-get install gcc-multilib g++-multilib
      - uses: actions/checkout@v2
      - name: make
        run: make
      - name: Upload Linux
        uses: actions/upload-artifact@v2
        with:
          name: extension
          path: ./reflection.so
  pack_and_upload_mod:
    runs-on: ubuntu-latest
    name: build & upload mod
    needs: ["build_win", "build_linux"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: extension
      - name: copy compiled extensions into mod
        run: cp *.dll *.so ./mod
      - name: pack
        id: pack
        uses: gruppe-adler/action-release-with-hemtt@cwd
        with:
          cwd: ./mod
      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: "@arma3_reflection.zip"
          asset_name: "@arma3_reflection.zip"
          asset_content_type: application/zip
